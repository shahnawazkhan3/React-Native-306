TypeScript

What is TypeScript?



 “TypeScript is JavaScript for application-scale development.”


============Your First TypeScript Code==========


================Boolean==================

let isDone: boolean = false;

var isDone: boolean = false;

=============Number======================


let decimal: number = 6;
let hex: number = 0xf00d;
let binary: number = 0b1010;
let octal: number = 0o744;


=============String=========================

let color: string = "blue";
color = 'red';

let fullName: string = `Bob Bobbington`;

let age: number = 37;
let sentence: string = `Hello, my name is ${ fullName }.

I'll be ${ age + 1 } years old next month.`;


=====================Array===========

let list: number[] = [1, 2, 3];
The second way uses a generic array type, Array<elemType>:

let list: Array<number> = [1, 2, 3]


==============Tuple============

// Declare a tuple type

var x: [string, number];

// Initialize it
x = ["hello", 10]; // OK
// Initialize it incorrectly
x = [10, "hello"]; // Error



console.log(x[0].substr(1)); // OK
console.log(x[1].substr(1)); // Error, 'number' does not have 'substr'


x[3] = "world"; // OK, 'string' can be assigned to 'string | number'

console.log(x[5].toString()); // OK, 'string' and 'number' both have 'toString'

x[6] = true; // Error, 'boolean' isn't 'string | number'

=================Any===========

let notSure: any = 4;

notSure = "maybe a string instead";
notSure = false; // okay, definitely a boolean


let notSure: any = 4;
notSure.ifItExists(); // okay, ifItExists might exist at runtime
notSure.toFixed(); // okay, toFixed exists (but the compiler doesn't check)

let prettySure: Object = 4;
prettySure.toFixed(); // Error: Property 'toFixed' doesn't exist on type 'Object'.


let list: any[] = [1, true, "free"];

list[1] = 100;


================//TypeScript - Variables============



S.No.	Variable Declaration Syntax & Description

1.)	var name:string = ”mary”

The variable stores a value of type string

2.)	var name:string;

The variable is a string variable. The variable’s value is set to undefined by default

3.)	var name = ”mary”

The variable’s type is inferred from the data type of the value. Here, the variable is of the type string

4.)	var name;

The variable’s data type is any. Its value is set to undefined by default



============
var name:string = "John"; 
var score1:number = 50;
var score2:number = 42.50
var sum = score1 + score2 
console.log("name"+name) 
console.log("first score: "+score1) 
console.log("second score: "+score2) 
console.log("sum of the scores: "+sum)


============Inferred Typing in TypeScript========


var num  = 2;  

  // data type inferred as  number 

console.log("value of num "+num); 

num = "12";
console.log(num);


===============//TypeScript Variable Scope===========



Global Scope 

Global variables are declared outside the programming constructs. These variables can be accessed from anywhere within your code.

Class Scope 

These variables are also called fields. Fields or class variables are declared within the class but outside the methods. These variables can be accessed using the object of the class. Fields can also be static. Static fields can be accessed using the class name.

Local Scope 

Local variables, as the name suggests, are declared within the constructs like methods, loops etc. Local variables are accessible only within the construct where they are declared.


============EXMPLE=========

Variable Scope


var global_num = 12

          //global variable 

class Numbers { 

   num_val = 13;             //class variable 
   static sval = 10;         //static field 
   
   storeNum():void { 
      var local_num = 14;    //local variable 
   } 
} 
console.log("Global num: "+global_num)  
console.log(Numbers.sval)   //static variable  
var obj = new Numbers(); 
console.log("Global num: "+obj.num_val)



=========================TypeScript - Operators==================





Arithmetic operators
Logical operators
Relational operators
Bitwise operators
Assignment operators
Ternary/conditional operator
String operator
Type Operator


==============Arithmetic operators=========

var num1:number = 10 
var num2:number = 2
var res:number = 0
 
res = num1 + num2 
console.log("Sum:        "+res); 

res = num1 - num2; 
console.log("Difference: "+res) 

res = num1*num2 
console.log("Product:    "+res) 

res = num1/num2 
console.log("Quotient:   "+res)
 
res = num1%num2 
console.log("Remainder:   "+res) 

num1++ 
console.log("Value of num1 after increment "+num1) 

num2-- 
console.log("Value of num2 after decrement "+num2)


====================Relational Operators==========


var num1:number = 5;
var num2:number = 9;

console.log("Value of num1: "+num1); 
console.log("Value of num2 :"+num2);
 
var res = num1>num2 
console.log("num1 greater than num2: "+res)

res = num1<num2 
console.log("num1 lesser than num2: "+res)  

res = num1>=num2 
console.log("num1 greater than or equal to  num2: "+res)

res = num1<=num2
console.log("num1 lesser than or equal to num2: "+res)  

res = num1==num2 
console.log("num1 is equal to num2: "+res)  

res = num1!=num2  
console.log("num1 is not equal to num2: "+res)


===============Logical Operators==========


var avg:number = 20; 
var percentage:number = 90; 

console.log("Value of avg: "+avg+" ,value of percentage: "+percentage);
 
var res:boolean = ((avg>50)&&(percentage>80)); 
console.log("(avg>50)&&(percentage>80): ",res);

var res:boolean = ((avg>50)||(percentage>80)); 
console.log("(avg>50)||(percentage>80): ",res);

var res:boolean=!((avg>50)&&(percentage>80)); 
console.log("!((avg>50)&&(percentage>80)): ",res);


================Assignment Operators============


var a: number = 12 
var b:number = 10  

a = b 
console.log("a = b: "+a)

a += b
console.log("a+=b: "+a)

a -= b 
console.log("a-=b: "+a)

a *= b 
console.log("a*=b: "+a)

a /= b 
console.log("a/=b: "+a)    

a %= b 
console.log("a%=b: "+a)


====================Loops===============

==============For Loop===========


Syntax
for (initial_count_value; termination-condition; step) {
   //statements 
}


var num:number = 5; 
var i:number; 
var factorial = 1; 

for(i = num;i>=1;i--) {
   factorial *= i;
}
console.log(factorial)


===============The for...in loop=========


Syntax
for (var val in list) { 
   //statements 
}



1) ============  

var j:any; 
var n:any = "a b c" 

for(j in n) {
   console.log(n[j])  
}


2)============

var j;
var n = "a b c";

for (j in n) {
   console.log(n[j]);
}


=================While Loop============


Syntax
while(condition) { 
   // statements if the condition is true 
}


var num:number = 5; 
var factorial:number = 1; 

while(num >=1) { 
   factorial = factorial * num; 
   num--; 
} 
console.log("The factorial  is "+factorial); 

==========do…while loop======


Syntax
do {
   //statements 
} while(condition)


var n = 10;
do {
   console.log(n);
   n--;
} while (n >= 0);








